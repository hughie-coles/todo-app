{"version":3,"sources":["components/shared/Edit.js","utils/cardmanagement.js","components/Header.js","components/listview/Card.js","components/listview/Listing.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Edit","props","history","useHistory","cardToEdit","match","params","id","cardId","cards","find","c","buttonLabel","isCopy","useState","name","setName","description","setDescription","status","setStatus","dueDate","setDueDate","returnToListing","push","onClick","className","onSubmit","e","preventDefault","newCard","card","updatedCards","newCardValues","index","findIndex","el","editCard","updateCards","uuidv4","htmlFor","type","onChange","target","value","Header","Card","goToPage","path","date","parsedDate","Date","getFullYear","getMonth","toLocaleString","minimumIntegerDigits","getDate","getHours","getMinutes","formatDate","filter","Listing","items","map","listTitle","style","minWidth","margin","display","hideButton","dueInLessThanAWeek","today","parsedDueDate","weekMinusSevenDays","setDate","console","log","overdueItems","Dashboard","flexDirection","sort","a","b","updateCardsWithStorage","App","loadedCards","localStorage","getItem","JSON","parse","React","setItem","stringify","render","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.af7625e9.chunk.js","sourcesContent":["import './Edit.css';\nimport {v4 as uuidv4} from 'uuid'\nimport React, {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { addCard, editCard} from '../../utils/cardmanagement';\n\nconst Edit = (props) => {\n\n    const history = useHistory();\n\n    let cardToEdit = {}\n    if (props && props.match && props.match.params && props.match.params.id) {\n        var cardId = props.match.params.id;\n        cardToEdit = props.cards.find( (c) => c.id === cardId) || {};\n    }\n\n    const buttonLabel = ( (cardId && !props.isCopy) ? \"Update\" : \"Add\") + \" Task\";\n\n    const [name, setName] = useState(cardToEdit.name || \"\");\n    const [description, setDescription] = useState(cardToEdit.description || \"\");\n    const [status, setStatus] = useState(cardToEdit.status || \"\");\n    const [dueDate, setDueDate] = useState(cardToEdit.dueDate || \"\");\n\n    const returnToListing = () => {\n        history.push('/');\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let card = {\n                    name: name, \n                    description: description, \n                    status: status, \n                    id: cardId, \n                    dueDate: dueDate\n                }\n\n        if (cardId && !props.isCopy) {\n            const updatedCards = editCard(props.cards, cardId, card);\n            props.updateCards(updatedCards);\n        }\n        else {\n            //New card needs a new id\n            card.id = uuidv4();\n            const updatedCards = addCard(props.cards, card);\n            props.updateCards(updatedCards);\n        }\n        returnToListing();  \n    }   \n\n    return (\n        <><button onClick={returnToListing} className=\"button\">Return to list</button>\n            <form onSubmit={handleSubmit}>\n                <section className=\"form\">\n                    <div className=\"formControl\">\n                        <label htmlFor=\"cardName\">Name:</label>\n                        <input name=\"cardName\" type=\"text\" onChange={ e => setName(e.target.value)} value={name} />\n                    </div>\n                    <div className=\"formControl\">\n                        <label htmlFor=\"cardDescription\">Description:</label>\n                        <textarea name=\"cardDescription\" onChange={ e => setDescription(e.target.value)} value={description} ></textarea>\n                    </div>\n                    <div className=\"formControl\">\n                        <label htmlFor=\"cardStatus\">Status:</label>\n                        <select name=\"cardStatus\" onChange={ e => setStatus(e.target.value)} value={status}>\n                            <option value=''>Select One</option>\n                            <option value=\"ready\">Ready</option>\n                            <option value=\"pending\">Pending</option>\n                            <option value=\"completed\">Completed</option>\n                        </select>\n                    </div>\n                    <div className=\"formControl\">\n                        <label htmlFor=\"cardDueDate\">Due Date:</label>\n                        <input name=\"cardDueDate\" type=\"datetime-local\" onChange={ e => setDueDate(e.target.value)} value={dueDate} />\n                    </div>\n                    <div className=\"formControl\">\n                        <input type=\"submit\" value={buttonLabel} />\n                    </div>\n                </section>\n            </form>\n        </>\n    )\n}\n\nexport default Edit;\n","\nimport {v4 as uuidv4} from 'uuid';\n\n const addCard = (cards, newCard) => {\n    newCard.id = uuidv4();\n    cards.push(newCard);\n    return cards\n  }\n\nconst editCard = (cards, cardId, newCardValues) => {\n    const index = cards.findIndex( (el) => el.id === cardId);\n    if(index > -1) {\n        cards[index] = newCardValues;\n    }\n    return cards;\n}\n\nconst removeCard = (cards, cardId) => {\n    const newList = cards.filter( card => card.id !== cardId)\n    return newList;\n}\n\n\nexport{ \n    addCard, \n    editCard,\n    removeCard,\n}","\n\n\nconst Header = () => {\n    return (\n        <header>\n            <h1>Hughie's Blockchain-based, AI-driven TODO List</h1>\n        </header>\n    )\n}\n\n\nexport default Header;","import './Card.css';\nimport { removeCard} from '../../utils/cardmanagement';\nimport { useHistory } from \"react-router-dom\";\n\nfunction Card(props){\n\n    const history = useHistory();\n    const goToPage = (path) => {\n        history.push(path);\n    }\n\n    const formatDate = (date) => {\n        const parsedDate = new Date(date); //just in case it's a string or something\n\n        return (parsedDate.getFullYear()\n               + '-' + (parsedDate.getMonth() + 1).toLocaleString('en-US', { minimumIntegerDigits: 2 }) \n               + '-' + parsedDate.getDate().toLocaleString('en-US', { minimumIntegerDigits: 2 })\n               + ' ' + parsedDate.getHours().toLocaleString('en-US', { minimumIntegerDigits: 2 }) \n               + ':' + parsedDate.getMinutes().toLocaleString('en-US', { minimumIntegerDigits: 2 })\n        );\n    }\n    \n    return (\n        <div className=\"card\">\n            <h3>{props.name}</h3>\n            <p>Due Date: { formatDate(props.dueDate)}</p>\n            <p>Status: {props.status}</p>\n            <p>{props.description}</p>\n      \n            <button onClick={ () => goToPage(\"/edit/\" + props.id)} className=\"button\">Edit</button>\n            <button onClick={ () => goToPage(\"/copy/\" + props.id)} className=\"button\">Copy</button>\n            <button onClick={ () => { \n                                    const updatedCards = removeCard(props.cards, props.id);\n                                    props.updateCards(updatedCards);\n                                }\n                                }>Delete</button>\n        </div>\n    )\n}\n\nexport default Card;","\nimport Card from \"./Card\"\nimport { useHistory } from \"react-router-dom\";\nimport './Listing.css';\n\nfunction Listing(props){\n\n    const history = useHistory();\n\n    const goToCreate = () => {\n        history.push('/create');\n    }\n\n    const items = props.cards.map( card => <li key={card.id}><Card updateCards={props.updateCards} cards={props.cards} id={card.id} name={card.name} status={card.status} dueDate={card.dueDate} description={card.description} /></li>)\n    return (\n        <div>\n            <h2>{props.listTitle}</h2>\n            <div style={ {minWidth: \"300px\"} }>\n                <ul>\n                    {items}\n                </ul>     \n                    <button onClick={goToCreate} className=\"button\" style={ {margin: \"10px 0 40px 50px\", display: props.hideButton ? \"none\": \"inherit\"} }>Add Task</button>\n            </div>\n        </div>\n        )\n}\n\nexport default Listing;","import Listing from './listview/Listing';\n\nconst sortCardsByDateAsc = (cards) => {\n    return cards.sort( (a,b) => new Date(a.dueDate) - new Date(b.dueDate));\n}\n\nconst dueInLessThanAWeek = (cards) => {\n    return cards.filter(card => {\n        const today = new Date();\n        const parsedDueDate = new Date(card.dueDate);\n        const weekMinusSevenDays = new Date(parsedDueDate).setDate(parsedDueDate.getDate() - 7);\n        console.log(parsedDueDate);\n        console.log(weekMinusSevenDays);\n        return ( (parsedDueDate - today) >= 0) && ( today - weekMinusSevenDays >= 0) && card.status !== \"completed\";\n    });\n}\n\nconst overdueItems = (cards) => {\n    return cards.filter(card => card.status !== \"completed\" && ((new Date(card.dueDate) - new Date()) <  0 ));\n}\n\nconst Dashboard = (props) => {\n    return (\n    <div style={ { display: \"flex\", flexDirection: \"row\" } }>\n        <Listing listTitle={\"Todo List\"} cards={ sortCardsByDateAsc(props.cards) } updateCards={props.updateCardsWithStorage} />\n        <Listing  listTitle={\"Due Soon\"} cards={ dueInLessThanAWeek(props.cards) } updateCards={props.updateCardsWithStorage} hideButton={true} />\n        <Listing  listTitle={\"Overdue\"} cards={ overdueItems(props.cards) } updateCards={props.updateCardsWithStorage} hideButton={true} />\n    </div>\n    )\n}\n\nexport default Dashboard;","import './App.css';\nimport React from 'react';\nimport {Route, Switch} from 'react-router';\nimport Edit from './components/shared/Edit';\nimport { BrowserRouter } from 'react-router-dom';\nimport Header from './components/Header';\nimport Dashboard from './components/Dashboard'\n\nfunction App() {\n\n  let loadedCards = localStorage.getItem('cards');\n  loadedCards = loadedCards ? JSON.parse(loadedCards) : [];\n\n  console.log(loadedCards);\n  const [cards, updateCards] = React.useState(loadedCards);\n\n  const updateCardsWithStorage = (cards) => {\n    console.log(\"Storing cards\");\n\n    localStorage.setItem('cards', JSON.stringify(cards));\n    updateCards(cards);\n    console.log(localStorage.getItem('cards'));\n  }\n\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n          <Route path='/edit/:id' render={ (p) => {\n                                                          p.updateCards = updateCardsWithStorage;\n                                                          p.cards = cards; //make sure the cards are added before the props are spread\n                                                          return <Edit {...p} /> } \n                                                  }/>\n          <Route path='/copy/:id' render={ (p) => {\n                                                          p.updateCards = updateCardsWithStorage;\n                                                          p.cards = cards; //make sure the cards are added before the props are spread\n                                                          return <Edit {...p} isCopy={true} /> } \n                                                  }/>\n          <Route path='/create' render={() => <Edit cards={cards} updateCards={updateCardsWithStorage} /> }  />\n          <Route path='/' render={() => <Dashboard cards={cards} updateCards={updateCardsWithStorage} /> } />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}