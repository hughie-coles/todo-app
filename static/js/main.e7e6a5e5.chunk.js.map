{"version":3,"sources":["components/listview/Card.js","utils/cardmanagement.js","components/listview/Listing.js","components/shared/Edit.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","history","useHistory","goToPage","path","push","className","name","date","parsedDate","Date","getFullYear","getMonth","toLocaleString","minimumIntegerDigits","getDate","getHours","getMinutes","formatDate","dueDate","status","description","onClick","id","cards","cardId","updatedCards","filter","card","updateCards","Listing","items","map","style","margin","Edit","cardToEdit","match","params","find","c","buttonLabel","isCopy","useState","setName","setDescription","setStatus","setDueDate","returnToListing","onSubmit","e","preventDefault","newCard","newCardValues","index","findIndex","el","editCard","uuidv4","htmlFor","type","onChange","target","value","Header","App","loadedCards","localStorage","getItem","JSON","parse","console","log","React","updateCardsWithStorage","setItem","stringify","render","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"6TAuCeA,MAnCf,SAAcC,GAEV,IAAMC,EAAUC,cACVC,EAAW,SAACC,GACdH,EAAQI,KAAKD,IAcjB,OACI,sBAAKE,UAAU,OAAf,UACI,6BAAKN,EAAMO,OACX,2CAdW,SAACC,GAChB,IAAMC,EAAa,IAAIC,KAAKF,GAE5B,OAAQC,EAAWE,cACV,KAAOF,EAAWG,WAAa,GAAGC,eAAe,QAAS,CAAEC,qBAAsB,IAClF,IAAML,EAAWM,UAAUF,eAAe,QAAS,CAAEC,qBAAsB,IAC3E,IAAML,EAAWO,WAAWH,eAAe,QAAS,CAAEC,qBAAsB,IAC5E,IAAML,EAAWQ,aAAaJ,eAAe,QAAS,CAAEC,qBAAsB,IAOpEI,CAAWlB,EAAMmB,YAChC,yCAAYnB,EAAMoB,UAClB,4BAAIpB,EAAMqB,cACV,wBAAQC,QAAU,kBAAMnB,EAAS,SAAWH,EAAMuB,KAAKjB,UAAU,SAAjE,kBACA,wBAAQgB,QAAU,kBAAMnB,EAAS,SAAWH,EAAMuB,KAAKjB,UAAU,SAAjE,kBACA,wBAAQgB,QAAU,WACM,ICdhBE,EAAOC,EDceC,GCdtBF,EDcgDxB,EAAMwB,MCd/CC,EDcsDzB,EAAMuB,GCbnEC,EAAMG,QAAQ,SAAAC,GAAI,OAAIA,EAAKL,KAAOE,MDclBzB,EAAM6B,YAAYH,IAF1C,wB,MENGI,MAnBf,SAAiB9B,GAEb,IAAMC,EAAUC,cAMV6B,EAAQ/B,EAAMwB,MAAMQ,KAAK,SAAAJ,GAAI,OAAI,6BAAkB,cAAC,EAAD,CAAMC,YAAa7B,EAAM6B,YAAaL,MAAOxB,EAAMwB,MAAOD,GAAIK,EAAKL,GAAIhB,KAAMqB,EAAKrB,KAAMa,OAAQQ,EAAKR,OAAQD,QAASS,EAAKT,QAASE,YAAaO,EAAKP,eAA/JO,EAAKL,OACrD,OACI,qCACI,6BACKQ,IAEL,wBAAQT,QAVG,WACfrB,EAAQI,KAAK,YASoBC,UAAU,SAAS2B,MAAQ,CAACC,OAAQ,oBAAjE,0BCiEGC,G,MA9EF,SAACnC,GAEV,IAAMC,EAAUC,cAEZkC,EAAa,GACjB,GAAIpC,GAASA,EAAMqC,OAASrC,EAAMqC,MAAMC,QAAUtC,EAAMqC,MAAMC,OAAOf,GAAI,CACrE,IAAIE,EAASzB,EAAMqC,MAAMC,OAAOf,GAChCa,EAAapC,EAAMwB,MAAMe,MAAM,SAACC,GAAD,OAAOA,EAAEjB,KAAOE,MAAW,GAG9D,IAAMgB,GAAiBhB,IAAWzB,EAAM0C,OAAU,SAAW,OAAS,QAVlD,EAYIC,mBAASP,EAAW7B,MAAQ,IAZhC,mBAYbA,EAZa,KAYPqC,EAZO,OAakBD,mBAASP,EAAWf,aAAe,IAbrD,mBAabA,EAba,KAaAwB,EAbA,OAcQF,mBAASP,EAAWhB,QAAU,IAdtC,mBAcbA,EAda,KAcL0B,EAdK,OAeUH,mBAASP,EAAWjB,SAAW,IAfzC,mBAebA,EAfa,KAeJ4B,EAfI,KAiBdC,EAAkB,WACpB/C,EAAQI,KAAK,MA0BjB,OACI,qCAAE,wBAAQiB,QAAS0B,EAAiB1C,UAAU,SAA5C,4BACE,sBAAM2C,SAzBO,SAACC,GAClBA,EAAEC,iBACF,IF1BU3B,EAAO4B,EE0BbxB,EAAO,CACCrB,KAAMA,EACNc,YAAaA,EACbD,OAAQA,EACRG,GAAIE,EACJN,QAASA,GAGrB,GAAIM,IAAWzB,EAAM0C,OAAQ,CACzB,IAAMhB,EF7BD,SAACF,EAAOC,EAAQ4B,GAC7B,IAAMC,EAAQ9B,EAAM+B,WAAW,SAACC,GAAD,OAAQA,EAAGjC,KAAOE,KAIjD,OAHG6B,GAAS,IACR9B,EAAM8B,GAASD,GAEZ7B,EEwBsBiC,CAASzD,EAAMwB,MAAOC,EAAQG,GACnD5B,EAAM6B,YAAYH,OAEjB,CAEDE,EAAKL,GAAKmC,cACV,IAAMhC,GFzCAF,EEyCuBxB,EAAMwB,OFzCtB4B,EEyC6BxB,GFxC1CL,GAAKmC,cACblC,EAAMnB,KAAK+C,GACJ5B,GEuCCxB,EAAM6B,YAAYH,GAEtBsB,KAKI,SACI,0BAAS1C,UAAU,OAAnB,UACI,sBAAKA,UAAU,cAAf,UACI,uBAAOqD,QAAQ,WAAf,mBACA,uBAAOpD,KAAK,WAAWqD,KAAK,OAAOC,SAAW,SAAAX,GAAC,OAAIN,EAAQM,EAAEY,OAAOC,QAAQA,MAAOxD,OAEvF,sBAAKD,UAAU,cAAf,UACI,uBAAOqD,QAAQ,kBAAf,0BACA,0BAAUpD,KAAK,kBAAkBsD,SAAW,SAAAX,GAAC,OAAIL,EAAeK,EAAEY,OAAOC,QAAQA,MAAO1C,OAE5F,sBAAKf,UAAU,cAAf,UACI,uBAAOqD,QAAQ,aAAf,qBACA,yBAAQpD,KAAK,aAAasD,SAAW,SAAAX,GAAC,OAAIJ,EAAUI,EAAEY,OAAOC,QAAQA,MAAO3C,EAA5E,UACI,wBAAQ2C,MAAM,GAAd,wBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,YAAd,6BAGR,sBAAKzD,UAAU,cAAf,UACI,uBAAOqD,QAAQ,cAAf,uBACA,uBAAOpD,KAAK,cAAcqD,KAAK,iBAAiBC,SAAW,SAAAX,GAAC,OAAIH,EAAWG,EAAEY,OAAOC,QAAQA,MAAO5C,OAEvG,qBAAKb,UAAU,cAAf,SACI,uBAAOsD,KAAK,SAASG,MAAOtB,gB,OChErCuB,EATA,WACX,OACI,iCACI,mFCuCGC,MArCf,WAEE,IAAIC,EAAcC,aAAaC,QAAQ,SACvCF,EAAcA,EAAcG,KAAKC,MAAMJ,GAAe,GAEtDK,QAAQC,IAAIN,GALC,MAMgBO,IAAM9B,SAASuB,GAN/B,mBAMN1C,EANM,KAMCK,EAND,KAQP6C,EAAyB,SAAClD,GAC9B+C,QAAQC,IAAI,iBAEZL,aAAaQ,QAAQ,QAASN,KAAKO,UAAUpD,IAC7CK,EAAYL,GACZ+C,QAAQC,IAAIL,aAAaC,QAAQ,WAGnC,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOhE,KAAK,YAAYyE,OAAS,SAACC,GAGc,OAFAA,EAAEjD,YAAc6C,EAChBI,EAAEtD,MAAQA,EACH,cAAC,EAAD,eAAUsD,OAEjE,cAAC,IAAD,CAAO1E,KAAK,YAAYyE,OAAS,SAACC,GAGc,OAFAA,EAAEjD,YAAc6C,EAChBI,EAAEtD,MAAQA,EACH,cAAC,EAAD,2BAAUsD,GAAV,IAAapC,QAAQ,QAE5E,cAAC,IAAD,CAAOtC,KAAK,UAAUyE,OAAQ,kBAAM,cAAC,EAAD,CAAMrD,MAAOA,EAAOK,YAAa6C,OACrE,cAAC,IAAD,CAAOtE,KAAK,IAAIyE,OAAQ,kBAAM,cAAC,EAAD,CAASrD,MAAOA,EAAOK,YAAa6C,cC3B7DK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASX,OACP,cAAC,IAAD,UACI,cAAC,EAAD,MAEJY,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e7e6a5e5.chunk.js","sourcesContent":["import './Card.css';\r\nimport { removeCard} from '../../utils/cardmanagement';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Card(props){\r\n\r\n    const history = useHistory();\r\n    const goToPage = (path) => {\r\n        history.push(path);\r\n    }\r\n\r\n    const formatDate = (date) => {\r\n        const parsedDate = new Date(date); //just in case it's a string or something\r\n\r\n        return (parsedDate.getFullYear()\r\n               + '-' + (parsedDate.getMonth() + 1).toLocaleString('en-US', { minimumIntegerDigits: 2 }) \r\n               + '-' + parsedDate.getDate().toLocaleString('en-US', { minimumIntegerDigits: 2 })\r\n               + ' ' + parsedDate.getHours().toLocaleString('en-US', { minimumIntegerDigits: 2 }) \r\n               + ':' + parsedDate.getMinutes().toLocaleString('en-US', { minimumIntegerDigits: 2 })\r\n        );\r\n    }\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <h3>{props.name}</h3>\r\n            <p>Due Date: { formatDate(props.dueDate)}</p>\r\n            <p>Status: {props.status}</p>\r\n            <p>{props.description}</p>\r\n            <button onClick={ () => goToPage(\"/edit/\" + props.id)} className=\"button\">Edit</button>\r\n            <button onClick={ () => goToPage(\"/copy/\" + props.id)} className=\"button\">Copy</button>\r\n            <button onClick={ () => { \r\n                                    const updatedCards = removeCard(props.cards, props.id);\r\n                                    props.updateCards(updatedCards);\r\n                                }\r\n                                }>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\n const addCard = (cards, newCard) => {\r\n    newCard.id = uuidv4();\r\n    cards.push(newCard);\r\n    return cards\r\n  }\r\n\r\nconst editCard = (cards, cardId, newCardValues) => {\r\n    const index = cards.findIndex( (el) => el.id === cardId);\r\n    if(index > -1) {\r\n        cards[index] = newCardValues;\r\n    }\r\n    return cards;\r\n}\r\n\r\nconst removeCard = (cards, cardId) => {\r\n    const newList = cards.filter( card => card.id !== cardId)\r\n    return newList;\r\n}\r\n\r\n\r\nexport{ \r\n    addCard, \r\n    editCard,\r\n    removeCard,\r\n}","\r\nimport Card from \"./Card\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Listing.css';\r\n\r\nfunction Listing(props){\r\n\r\n    const history = useHistory();\r\n\r\n    const goToCreate = () => {\r\n        history.push('/create');\r\n    }\r\n\r\n    const items = props.cards.map( card => <li key={card.id}><Card updateCards={props.updateCards} cards={props.cards} id={card.id} name={card.name} status={card.status} dueDate={card.dueDate} description={card.description} /></li>)\r\n    return (\r\n        <>\r\n            <ul>\r\n                {items}\r\n            </ul>\r\n            <button onClick={goToCreate} className=\"button\" style={ {margin: \"10px 0 40px 50px\"} }>Add Task</button>\r\n        </>\r\n        )\r\n}\r\n\r\nexport default Listing;","import './Edit.css';\r\nimport {v4 as uuidv4} from 'uuid'\r\nimport React, {useState} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { addCard, editCard} from '../../utils/cardmanagement';\r\n\r\nconst Edit = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    let cardToEdit = {}\r\n    if (props && props.match && props.match.params && props.match.params.id) {\r\n        var cardId = props.match.params.id;\r\n        cardToEdit = props.cards.find( (c) => c.id === cardId) || {};\r\n    }\r\n\r\n    const buttonLabel = ( (cardId && !props.isCopy) ? \"Update\" : \"Add\") + \" Task\";\r\n\r\n    const [name, setName] = useState(cardToEdit.name || \"\");\r\n    const [description, setDescription] = useState(cardToEdit.description || \"\");\r\n    const [status, setStatus] = useState(cardToEdit.status || \"\");\r\n    const [dueDate, setDueDate] = useState(cardToEdit.dueDate || \"\");\r\n\r\n    const returnToListing = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let card = {\r\n                    name: name, \r\n                    description: description, \r\n                    status: status, \r\n                    id: cardId, \r\n                    dueDate: dueDate\r\n                }\r\n\r\n        if (cardId && !props.isCopy) {\r\n            const updatedCards = editCard(props.cards, cardId, card);\r\n            props.updateCards(updatedCards);\r\n        }\r\n        else {\r\n            //New card needs a new id\r\n            card.id = uuidv4();\r\n            const updatedCards = addCard(props.cards, card);\r\n            props.updateCards(updatedCards);\r\n        }\r\n        returnToListing();  \r\n    }   \r\n\r\n    return (\r\n        <><button onClick={returnToListing} className=\"button\">Return to list</button>\r\n            <form onSubmit={handleSubmit}>\r\n                <section className=\"form\">\r\n                    <div className=\"formControl\">\r\n                        <label htmlFor=\"cardName\">Name:</label>\r\n                        <input name=\"cardName\" type=\"text\" onChange={ e => setName(e.target.value)} value={name} />\r\n                    </div>\r\n                    <div className=\"formControl\">\r\n                        <label htmlFor=\"cardDescription\">Description:</label>\r\n                        <textarea name=\"cardDescription\" onChange={ e => setDescription(e.target.value)} value={description} ></textarea>\r\n                    </div>\r\n                    <div className=\"formControl\">\r\n                        <label htmlFor=\"cardStatus\">Status:</label>\r\n                        <select name=\"cardStatus\" onChange={ e => setStatus(e.target.value)} value={status}>\r\n                            <option value=''>Select One</option>\r\n                            <option value=\"ready\">Ready</option>\r\n                            <option value=\"pending\">Pending</option>\r\n                            <option value=\"completed\">Completed</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"formControl\">\r\n                        <label htmlFor=\"cardDueDate\">Due Date:</label>\r\n                        <input name=\"cardDueDate\" type=\"datetime-local\" onChange={ e => setDueDate(e.target.value)} value={dueDate} />\r\n                    </div>\r\n                    <div className=\"formControl\">\r\n                        <input type=\"submit\" value={buttonLabel} />\r\n                    </div>\r\n                </section>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Edit;\r\n","\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>Hughie's Blockchain-based, AI-driven TODO List</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","import './App.css';\r\nimport React from 'react';\r\nimport {Route, Switch} from 'react-router';\r\nimport Listing from './components/listview/Listing';\r\nimport Edit from './components/shared/Edit';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport Header from './components/Header';\r\n\r\nfunction App() {\r\n\r\n  let loadedCards = localStorage.getItem('cards');\r\n  loadedCards = loadedCards ? JSON.parse(loadedCards) : [];\r\n\r\n  console.log(loadedCards);\r\n  const [cards, updateCards] = React.useState(loadedCards);\r\n\r\n  const updateCardsWithStorage = (cards) => {\r\n    console.log(\"Storing cards\");\r\n\r\n    localStorage.setItem('cards', JSON.stringify(cards));\r\n    updateCards(cards);\r\n    console.log(localStorage.getItem('cards'));\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Header />\r\n      <Switch>\r\n          <Route path='/edit/:id' render={ (p) => {\r\n                                                          p.updateCards = updateCardsWithStorage;\r\n                                                          p.cards = cards; //make sure the cards are added before the props are spread\r\n                                                          return <Edit {...p} /> } \r\n                                                  }/>\r\n          <Route path='/copy/:id' render={ (p) => {\r\n                                                          p.updateCards = updateCardsWithStorage;\r\n                                                          p.cards = cards; //make sure the cards are added before the props are spread\r\n                                                          return <Edit {...p} isCopy={true} /> } \r\n                                                  }/>\r\n          <Route path='/create' render={() => <Edit cards={cards} updateCards={updateCardsWithStorage} /> }  />\r\n          <Route path='/' render={() => <Listing cards={cards} updateCards={updateCardsWithStorage} /> } />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}